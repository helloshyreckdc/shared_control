#!/usr/bin/python

import rospy
import tf
import geometry_msgs.msg
from std_msgs.msg import Char
import socket
from sensor_msgs.msg import JointState
import math
from numpy import *

count = 1
def callback(data):
  global count 
  if count == 1:
    
    try:
      (trans_tool0, rot_toolha) = listener.lookupTransform('/base', '/tool0', rospy.Time(0))
    except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
      print("Fail to find the transformation of tool0")
  
    try:
      (trans_target, rot_target) = listener.lookupTransform('/base', '/cube_target', rospy.Time(0))
    except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
      print("Fail to find the transformation of target")

    #matrix_tool0 = tf.transformations.quaternion_matrix(rot_toolha)
    print(rot_toolha)
    print(rot_toolha[1]/math.sqrt(abs(rot_toolha[3]*rot_toolha[3])))
    #print(matrix_tool0)
    #a = trans_tool0
   # b = trans_tool0[1]
   # c = trans_tool0[2]
    #print(a, '\n', b, '\n', c, '\n')

  count = count+1
   # rospy.sleep(300)

def teleop_BCI():
  rospy.init_node('teleop_BCI', anonymous=True)
  rospy.Subscriber('/joint_states', JointState, callback)
  global listener
  listener = tf.TransformListener()
  HOST = "192.168.2.75"
  PORT = 30002
  global s
  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  s.connect((HOST, PORT))
  
#  global pub
#  pub = rospy.Publisher('trigger_auto', Char, queue_size=1)
#  y should add 0.04 for compensate
#  the fourth to sixth para is rotate vector on control board, not RPY
#  s.send("get_target_joint_positions()" + "\n")
#  data = s.recv(1024)
#  print(repr(data))
  rospy.spin()
    

if __name__ == '__main__':
  
  teleop_BCI()
